{
  "address": "0x816b79b3b7E0229D2860B4F60067176d61556233",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        },
        {
          "internalType": "contract IERC20",
          "name": "_weth",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BuyTicket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "ClaimTicket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReserveTickets",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "SetBaseURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        }
      ],
      "name": "SetupRelease",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "available",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "numberOfTokens",
          "type": "uint256"
        }
      ],
      "name": "buyTicket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimTicket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimsPerAddr",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "curMaxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "holders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxClaimsPerAddr",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMintsPerAddr",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mintsPerAddr",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "releaseDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "releaseEnd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "releaseMaxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "releaseMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "releaseStart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserveAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserveMaxAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "numberOfTokens",
          "type": "uint256"
        }
      ],
      "name": "reserveTickets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "setURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_releaseStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_releaseEnd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_releaseMaxSupply",
          "type": "uint256"
        }
      ],
      "name": "setupRelease",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "ticketBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalTicketSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawWETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x51b581da347165f0adf55b3a5d71ae288b533697d53aa607cd1c1f91b00c210b",
  "receipt": {
    "to": null,
    "from": "0x60Aba88d7f833E5e04006acD0D0580fc0c9A4FBC",
    "contractAddress": "0x816b79b3b7E0229D2860B4F60067176d61556233",
    "transactionIndex": 3,
    "gasUsed": "2462701",
    "logsBloom": "0x
    "blockHash": "0x2354829f62208135e193cd903445c6dfa42259431eeadd6f577b5f7e670bed20",
    "transactionHash": "0x51b581da347165f0adf55b3a5d71ae288b533697d53aa607cd1c1f91b00c210b",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 22325973,
        "transactionHash": "0x51b581da347165f0adf55b3a5d71ae288b533697d53aa607cd1c1f91b00c210b",
        "address": "0x816b79b3b7E0229D2860B4F60067176d61556233",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000060aba88d7f833e5e04006acd0d0580fc0c9a4fbc"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x2354829f62208135e193cd903445c6dfa42259431eeadd6f577b5f7e670bed20"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 22325973,
        "transactionHash": "0x51b581da347165f0adf55b3a5d71ae288b533697d53aa607cd1c1f91b00c210b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000060aba88d7f833e5e04006acd0d0580fc0c9a4fbc",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000577e2296ee14000000000000000000000000000000000000000000000000000cecc486664f88000000000000000000000000000000000000000000000002a1e9a65b7047dd64ac0000000000000000000000000000000000000000000000000c954663cf6174000000000000000000000000000000000000000000000002a1e9fdd992decb78ac",
        "logIndex": 7,
        "blockHash": "0x2354829f62208135e193cd903445c6dfa42259431eeadd6f577b5f7e670bed20"
      }
    ],
    "blockNumber": 22325973,
    "cumulativeGasUsed": "2635139",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "ipfs://QmeSUfNKCu6bnPYF3MiFfSCcbaUoxcau8Bw3aBToAKFxZv",
    "0xA6FA4fB5f76172d178d61B04b0ecd319C5d1C0aa"
  ],
  "solcInputHash": "6756f089e4798e697fb331b9d8ff6073",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"contract IERC20\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyTicket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ClaimTicket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReserveTickets\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"SetBaseURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"SetupRelease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"available\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"buyTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimsPerAddr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curMaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxClaimsPerAddr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintsPerAddr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintsPerAddr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseMaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveMaxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"reserveTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_releaseStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_releaseEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_releaseMaxSupply\",\"type\":\"uint256\"}],\"name\":\"setupRelease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ticketBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTicketSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extends ERC721 Non-Fungible Token Standard basic implementation\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"exists(uint256)\":{\"details\":\"Indicates weither any token exist with a given id, or not.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Apollo2022 Boarding Passes Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"buyTicket(address,uint256)\":{\"notice\":\"Buy ticket\"},\"claimTicket()\":{\"notice\":\"Claim free ticket\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Apollo2022.sol\":\"Apollo2022\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][account] = accountBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xbda715785876dbfc675396b89ac45bb9f4cceb968133a8258924d163a700f0e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7de6e64d4a8075e803a972cc77c4c91463e0c3777e4110eacfb5d4a71759b2fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155Supply is ERC1155 {\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates weither any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155Supply.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_mint}.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._mint(account, id, amount, data);\\n        _totalSupply[id] += amount;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_mintBatch}.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._mintBatch(to, ids, amounts, data);\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            _totalSupply[ids[i]] += amounts[i];\\n        }\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_burn}.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._burn(account, id, amount);\\n        _totalSupply[id] -= amount;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_burnBatch}.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual override {\\n        super._burnBatch(account, ids, amounts);\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            _totalSupply[ids[i]] -= amounts[i];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbabdad0b4e2eaf7d0c756c901f34d6d823538a45a7848c362349634216148986\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6ba0564f6970414d1166ee83127b834bbe7dbf699241a3005eb7ae64a2211975\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/AbstractApollo2022.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nabstract contract AbstractApollo2022 is ERC1155, ERC1155Supply, Ownable {\\n\\n    string public name;\\n    string public symbol;\\n    uint256 public constant tokenID = 0;\\n    \\n    function setURI(string memory newURI) external onlyOwner {\\n        _setURI(newURI);\\n        emit URI(newURI, tokenID);\\n    }\\n\\n    function totalTicketSupply() public view returns(uint256) {\\n        return totalSupply(tokenID);\\n    }\\n\\n    function ticketBalanceOf(address account) public view returns(uint256){\\n        return balanceOf(account, tokenID);\\n    }\\n\\n    function _mintTickets(address account, uint256 amount) internal {\\n        _mint(account, tokenID, amount, \\\"\\\");\\n    }\\n\\n    function uri(uint256 _id) public view override returns (string memory){\\n        require(_id == tokenID, \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n        return super.uri(_id);\\n    }\\n\\n    /* ***************************** */\\n\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual override(ERC1155, ERC1155Supply) {\\n        super._mint(account, id, amount, data);\\n    }\\n\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override(ERC1155, ERC1155Supply) {\\n        super._mintBatch(to, ids, amounts, data);\\n    }\\n\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual override(ERC1155, ERC1155Supply) {\\n        super._burn(account, id, amount);\\n    }\\n\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual override(ERC1155, ERC1155Supply) {\\n        super._burnBatch(account, ids, amounts);\\n    } \\n\\n}\",\"keccak256\":\"0x77edf06df74d15324d5f3faf89b8d55af280dd794bf3bc74f0eecd8dadc1af18\",\"license\":\"GPL-3.0-or-later\"},\"contracts/Apollo2022.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AbstractApollo2022.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title Apollo2022 Boarding Passes Contract\\n * @dev Extends ERC721 Non-Fungible Token Standard basic implementation\\n */\\ncontract Apollo2022 is AbstractApollo2022 {\\n    using SafeERC20 for IERC20;\\n\\n    event ClaimTicket(address indexed account);\\n    event BuyTicket(address indexed account, address indexed sender, uint256 amount);\\n    event SetupRelease(uint256 start, uint256 end, uint256 supply);\\n    event SetBaseURI(string uri);\\n    event ReserveTickets(address indexed account, uint256 amount);\\n\\n    uint256 public constant maxSupply = 10000;\\n    uint256 public constant maxMintsPerAddr = 5;\\n    uint256 public constant maxClaimsPerAddr = 1;\\n    uint256 public constant buyPrice = 0.01 ether;\\n    uint256 public reserveMaxAmount = 500;\\n    uint256 public reserveAmount;\\n    uint256 public releaseStart;\\n    uint256 public releaseEnd;\\n    uint256 public releaseDuration;\\n    uint256 public releaseMaxSupply;\\n    uint256 public releaseMinted;\\n    uint256 public curMaxSupply;\\n\\n    IERC20 public immutable weth;\\n\\n    mapping(address => uint256) public mintsPerAddr;\\n    mapping(address => uint256) public claimsPerAddr;\\n\\n    address[] public holders;\\n\\n    constructor(string memory _uri, IERC20 _weth)\\n        ERC1155(_uri) ERC1155Supply()\\n    {\\n        weth = _weth;\\n    }\\n\\n    modifier onlyEOA() {\\n        require(msg.sender == tx.origin, \\\"Must use EOA\\\");\\n        _;\\n    }\\n\\n    function setupRelease(\\n        uint256 _releaseStart,\\n        uint256 _releaseEnd,\\n        uint256 _releaseMaxSupply\\n    ) external onlyOwner {\\n        require(\\n            block.timestamp > releaseEnd && available() == 0,\\n            \\\"Previous release is still running\\\"\\n        );\\n        require(curMaxSupply + _releaseMaxSupply <= maxSupply, \\\"Incorrect releaseMaxSupply value\\\");\\n        releaseStart = _releaseStart;\\n        releaseEnd = _releaseEnd;\\n        releaseDuration = _releaseEnd - _releaseStart;\\n        releaseMaxSupply = _releaseMaxSupply;\\n        curMaxSupply += _releaseMaxSupply;\\n        releaseMinted = 0;\\n\\n        emit SetupRelease(_releaseStart, _releaseEnd, _releaseMaxSupply);\\n    }\\n\\n    function withdrawWETH() external onlyOwner {\\n        weth.safeTransfer(msg.sender, weth.balanceOf(address(this)));\\n    }\\n\\n    function available() public view returns (uint256) {\\n        uint256 remaining = releaseMaxSupply - releaseMinted;\\n        if (block.timestamp < releaseStart) {\\n            // console.log(\\\"< releaseStart; 0\\\");\\n            return 0;\\n        } else if (block.timestamp > releaseEnd) {\\n            // console.log(\\\"> releaseEnd; remaining\\\");\\n            return remaining;\\n        } else {\\n            uint256 released = (releaseMaxSupply * (block.timestamp - releaseStart)) /\\n                releaseDuration;\\n\\n            // console.log(\\\"released=%s minted=%s\\\", released, releaseMinted);\\n            return (released > releaseMinted) ? released - releaseMinted : 0;\\n        }\\n    }\\n\\n    /**\\n     * @notice Claim free ticket\\n     */\\n    function claimTicket() external onlyEOA {\\n        require(claimsPerAddr[msg.sender] < maxClaimsPerAddr, \\\"Max claims per address exceeded\\\");\\n        require(mintsPerAddr[msg.sender] < maxMintsPerAddr, \\\"Max mints per address exceeded\\\");\\n        require(totalTicketSupply() < curMaxSupply, \\\"Mint would exceed max supply of Tickets\\\");\\n        require(available() > 0, \\\"No tickets available\\\");\\n\\n        claimsPerAddr[msg.sender]++;\\n        _releaseMint(msg.sender, 1);\\n\\n        emit ClaimTicket(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Buy ticket\\n     */\\n    function buyTicket(address to, uint256 numberOfTokens) external onlyEOA {\\n        require(\\n            mintsPerAddr[to] + numberOfTokens <= maxMintsPerAddr,\\n            \\\"Max mints per address exceeded\\\"\\n        );\\n        require(\\n            totalTicketSupply() + numberOfTokens <= curMaxSupply,\\n            \\\"Mint would exceed max supply of Tickets\\\"\\n        );\\n\\n        uint256 amount = numberOfTokens * buyPrice;\\n        weth.safeTransferFrom(address(msg.sender), address(this), amount);\\n\\n        _releaseMint(to, numberOfTokens);\\n\\n        emit BuyTicket(to, msg.sender, numberOfTokens);\\n    }\\n\\n    function reserveTickets(address to, uint256 numberOfTokens) external onlyOwner {\\n        require(\\n            curMaxSupply + numberOfTokens <= maxSupply,\\n            \\\"Mint would exceed max supply of Tickets\\\"\\n        );\\n        require(\\n            reserveAmount + numberOfTokens <= reserveMaxAmount,\\n            \\\"Mint would exeed max allowed reserve amount\\\"\\n        );\\n        curMaxSupply += numberOfTokens;\\n        reserveAmount += numberOfTokens;\\n\\n        _mintTickets(to, numberOfTokens);\\n\\n        emit ReserveTickets(to, numberOfTokens);\\n    }\\n\\n    function _releaseMint(address to, uint256 amount) internal {\\n        mintsPerAddr[to] += amount;\\n        releaseMinted += amount;\\n\\n        _mintTickets(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x7d5f4e231ff1926bbfa1ba4716f4bf4b49e17115724fc24cfb932bc1b51ebf73\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60a06040526101f46007553480156200001757600080fd5b5060405162002c5938038062002c598339810160408190526200003a91620001a9565b81620000468162000065565b5062000052336200007e565b6001600160a01b031660805250620002d7565b80516200007a906002906020840190620000d0565b5050565b600480546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620000de906200029a565b90600052602060002090601f0160209004810192826200010257600085556200014d565b82601f106200011d57805160ff19168380011785556200014d565b828001600101855582156200014d579182015b828111156200014d57825182559160200191906001019062000130565b506200015b9291506200015f565b5090565b5b808211156200015b576000815560010162000160565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620001a457600080fd5b919050565b60008060408385031215620001bd57600080fd5b82516001600160401b0380821115620001d557600080fd5b818501915085601f830112620001ea57600080fd5b815181811115620001ff57620001ff62000176565b604051601f8201601f19908116603f011681019083821181831017156200022a576200022a62000176565b816040528281526020935088848487010111156200024757600080fd5b600091505b828210156200026b57848201840151818301850152908301906200024c565b828211156200027d5760008484830101525b95506200028f9150508582016200018c565b925050509250929050565b600181811c90821680620002af57607f821691505b60208210811415620002d157634e487b7160e01b600052602260045260246000fd5b50919050565b608051612951620003086000396000818161037f01528181610acf01528181610b440152610dc901526129516000f3fe608060405234801561001057600080fd5b50600436106102525760003560e01c80636b49e5f911610146578063a22cb465116100c3578063cd34f0ee11610087578063cd34f0ee14610508578063d5abeb0114610511578063e985e9c51461051a578063f242432a14610556578063f2fde38b14610569578063f9b418911461057c57600080fd5b8063a22cb465146104a5578063a5c42ef1146104b8578063ab8caf3b146104c0578063bd85b039146104c8578063c4d2696d146104e857600080fd5b80638bf22a0e1161010a5780638bf22a0e146104685780638da5cb5b1461047157806393e0682b1461048257806395d89b41146104955780639c84e6f21461049d57600080fd5b80636b49e5f914610437578063715018a614610440578063766e33f4146104485780638033fe49146104515780638620410b1461045a57600080fd5b80632eb2c2d6116101d45780634c02f62e116101985780634c02f62e146103d25780634e1273f4146103da5780634f558e79146103fa57806356ce0f671461041c57806366a5ef2f1461042457600080fd5b80632eb2c2d6146103675780633fc8cef31461037a57806344098c9f146103a157806348a0d754146103c15780634b09b72a146103c957600080fd5b80630e89341c1161021b5780630e89341c146102dd5780631966ebb8146102f05780632240dbdb146102f95780632a11ced0146103295780632c4e422d1461035457600080fd5b8062fdd58e1461025757806301ffc9a71461027d57806302fe5305146102a057806306fdde03146102b55780630e75822c146102ca575b600080fd5b61026a610265366004611f8c565b610585565b6040519081526020015b60405180910390f35b61029061028b366004611fcc565b61061c565b6040519015158152602001610274565b6102b36102ae36600461208a565b61066e565b005b6102bd6106dd565b6040516102749190612133565b6102b36102d8366004611f8c565b61076b565b6102bd6102eb366004612146565b6108b9565b61026a600e5481565b6000805260036020527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff5461026a565b61033c610337366004612146565b61092a565b6040516001600160a01b039091168152602001610274565b61026a61036236600461215f565b610954565b6102b361037536600461222f565b610961565b61033c7f000000000000000000000000000000000000000000000000000000000000000081565b61026a6103af36600461215f565b600f6020526000908152604090205481565b61026a6109f8565b61026a60085481565b6102b3610a82565b6103ed6103e83660046122d9565b610b6d565b60405161027491906123df565b610290610408366004612146565b600090815260036020526040902054151590565b61026a600181565b6102b3610432366004611f8c565b610c97565b61026a600c5481565b6102b3610e40565b61026a60095481565b61026a600a5481565b61026a662386f26fc1000081565b61026a60075481565b6004546001600160a01b031661033c565b6102b36104903660046123f2565b610e74565b6102bd610fea565b6102b3610ff7565b6102b36104b336600461242c565b6111e4565b61026a600081565b61026a600581565b61026a6104d6366004612146565b60009081526003602052604090205490565b61026a6104f636600461215f565b60106020526000908152604090205481565b61026a600d5481565b61026a61271081565b610290610528366004612463565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6102b3610564366004612496565b6112bb565b6102b361057736600461215f565b611342565b61026a600b5481565b60006001600160a01b0383166105f65760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b148061064d57506001600160e01b031982166303a24d0760e21b145b8061066857506301ffc9a760e01b6001600160e01b03198316145b92915050565b6004546001600160a01b031633146106985760405162461bcd60e51b81526004016105ed906124fb565b6106a1816113dd565b60007f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b826040516106d29190612133565b60405180910390a250565b600580546106ea90612530565b80601f016020809104026020016040519081016040528092919081815260200182805461071690612530565b80156107635780601f1061073857610100808354040283529160200191610763565b820191906000526020600020905b81548152906001019060200180831161074657829003601f168201915b505050505081565b6004546001600160a01b031633146107955760405162461bcd60e51b81526004016105ed906124fb565b61271081600e546107a69190612581565b11156107c45760405162461bcd60e51b81526004016105ed90612599565b600754816008546107d59190612581565b11156108375760405162461bcd60e51b815260206004820152602b60248201527f4d696e7420776f756c64206578656564206d617820616c6c6f7765642072657360448201526a195c9d9948185b5bdd5b9d60aa1b60648201526084016105ed565b80600e60008282546108499190612581565b9250508190555080600860008282546108629190612581565b90915550610872905082826113f4565b816001600160a01b03167fdc1be2b3178a4f8f792d301d58c67ced5cf041ef7c9601aaedbd3ccf3957ddc3826040516108ad91815260200190565b60405180910390a25050565b606081156109215760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016105ed565b61066882611410565b6011818154811061093a57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000610668826000610585565b6001600160a01b03851633148061097d575061097d8533610528565b6109e45760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b60648201526084016105ed565b6109f185858585856114a4565b5050505050565b600080600d54600c54610a0b91906125e0565b9050600954421015610a1f57600091505090565b600a54421115610a2e57919050565b6000600b5460095442610a4191906125e0565b600c54610a4e91906125f7565b610a589190612616565b9050600d548111610a6a576000610a77565b600d54610a7790826125e0565b9250505090565b5090565b6004546001600160a01b03163314610aac5760405162461bcd60e51b81526004016105ed906124fb565b6040516370a0823160e01b8152306004820152610b6b9033906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610b16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3a9190612638565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190611681565b565b60608151835114610bd25760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016105ed565b6000835167ffffffffffffffff811115610bee57610bee611fe9565b604051908082528060200260200182016040528015610c17578160200160208202803683370190505b50905060005b8451811015610c8f57610c62858281518110610c3b57610c3b612651565b6020026020010151858381518110610c5557610c55612651565b6020026020010151610585565b828281518110610c7457610c74612651565b6020908102919091010152610c8881612667565b9050610c1d565b509392505050565b333214610cd55760405162461bcd60e51b815260206004820152600c60248201526b4d7573742075736520454f4160a01b60448201526064016105ed565b6001600160a01b0382166000908152600f6020526040902054600590610cfc908390612581565b1115610d4a5760405162461bcd60e51b815260206004820152601e60248201527f4d6178206d696e7473207065722061646472657373206578636565646564000060448201526064016105ed565b600e5481610d7f6000805260036020527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff5490565b610d899190612581565b1115610da75760405162461bcd60e51b81526004016105ed90612599565b6000610dba662386f26fc10000836125f7565b9050610df16001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330846116e9565b610dfb8383611727565b60405182815233906001600160a01b038516907f183b7d2009bd295f45618f67543e0ff22bd119ab0449f00482d31b796b1707869060200160405180910390a3505050565b6004546001600160a01b03163314610e6a5760405162461bcd60e51b81526004016105ed906124fb565b610b6b6000611778565b6004546001600160a01b03163314610e9e5760405162461bcd60e51b81526004016105ed906124fb565b600a5442118015610eb45750610eb26109f8565b155b610f0a5760405162461bcd60e51b815260206004820152602160248201527f50726576696f75732072656c65617365206973207374696c6c2072756e6e696e6044820152606760f81b60648201526084016105ed565b61271081600e54610f1b9190612581565b1115610f695760405162461bcd60e51b815260206004820181905260248201527f496e636f72726563742072656c656173654d6178537570706c792076616c756560448201526064016105ed565b6009839055600a829055610f7d83836125e0565b600b55600c819055600e8054829190600090610f9a908490612581565b90915550506000600d5560408051848152602081018490529081018290527f161f863c66e922aa93d8c39fcabf4d758415785c253e261588ec6e5de68cb03a9060600160405180910390a1505050565b600680546106ea90612530565b3332146110355760405162461bcd60e51b815260206004820152600c60248201526b4d7573742075736520454f4160a01b60448201526064016105ed565b336000908152601060205260409020546001116110945760405162461bcd60e51b815260206004820152601f60248201527f4d617820636c61696d732070657220616464726573732065786365656465640060448201526064016105ed565b336000908152600f60205260409020546005116110f35760405162461bcd60e51b815260206004820152601e60248201527f4d6178206d696e7473207065722061646472657373206578636565646564000060448201526064016105ed565b600e546000805260036020527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff541061113e5760405162461bcd60e51b81526004016105ed90612599565b60006111486109f8565b1161118c5760405162461bcd60e51b81526020600482015260146024820152734e6f207469636b65747320617661696c61626c6560601b60448201526064016105ed565b3360009081526010602052604081208054916111a783612667565b91905055506111b7336001611727565b60405133907f1b95c0400d5c41a0ede89b5c1e59863547019bfb3ec7c4d321f59262fcc6c79890600090a2565b336001600160a01b038316141561124f5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016105ed565b3360008181526001602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6001600160a01b0385163314806112d757506112d78533610528565b6113355760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016105ed565b6109f185858585856117ca565b6004546001600160a01b0316331461136c5760405162461bcd60e51b81526004016105ed906124fb565b6001600160a01b0381166113d15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105ed565b6113da81611778565b50565b80516113f0906002906020840190611ee0565b5050565b6113f082600083604051806020016040528060008152506118f0565b60606002805461141f90612530565b80601f016020809104026020016040519081016040528092919081815260200182805461144b90612530565b80156114985780601f1061146d57610100808354040283529160200191611498565b820191906000526020600020905b81548152906001019060200180831161147b57829003601f168201915b50505050509050919050565b81518351146115065760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016105ed565b6001600160a01b03841661152c5760405162461bcd60e51b81526004016105ed90612682565b3360005b845181101561161357600085828151811061154d5761154d612651565b60200260200101519050600085838151811061156b5761156b612651565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156115bb5760405162461bcd60e51b81526004016105ed906126c7565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906115f8908490612581565b925050819055505050508061160c90612667565b9050611530565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611663929190612711565b60405180910390a46116798187878787876118fc565b505050505050565b6040516001600160a01b0383166024820152604481018290526116e490849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611a58565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526117219085906323b872dd60e01b906084016116ad565b50505050565b6001600160a01b0382166000908152600f60205260408120805483929061174f908490612581565b9250508190555080600d60008282546117689190612581565b909155506113f0905082826113f4565b600480546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0384166117f05760405162461bcd60e51b81526004016105ed90612682565b3361180981878761180088611b2a565b6109f188611b2a565b6000848152602081815260408083206001600160a01b038a1684529091529020548381101561184a5760405162461bcd60e51b81526004016105ed906126c7565b6000858152602081815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290611887908490612581565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46118e7828888888888611b75565b50505050505050565b61172184848484611c30565b6001600160a01b0384163b156116795760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611940908990899088908890889060040161273f565b6020604051808303816000875af192505050801561197b575060408051601f3d908101601f191682019092526119789181019061279d565b60015b611a28576119876127ba565b806308c379a014156119c1575061199c6127d6565b806119a757506119c3565b8060405162461bcd60e51b81526004016105ed9190612133565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016105ed565b6001600160e01b0319811663bc197c8160e01b146118e75760405162461bcd60e51b81526004016105ed90612860565b6000611aad826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c659092919063ffffffff16565b8051909150156116e45780806020019051810190611acb91906128a8565b6116e45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105ed565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611b6457611b64612651565b602090810291909101015292915050565b6001600160a01b0384163b156116795760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611bb990899089908890889088906004016128c5565b6020604051808303816000875af1925050508015611bf4575060408051601f3d908101601f19168201909252611bf19181019061279d565b60015b611c00576119876127ba565b6001600160e01b0319811663f23a6e6160e01b146118e75760405162461bcd60e51b81526004016105ed90612860565b611c3c84848484611c7e565b60008381526003602052604081208054849290611c5a908490612581565b909155505050505050565b6060611c748484600085611d7f565b90505b9392505050565b6001600160a01b038416611cde5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016105ed565b33611cef8160008761180088611b2a565b6000848152602081815260408083206001600160a01b038916845290915281208054859290611d1f908490612581565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46109f181600087878787611b75565b606082471015611de05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105ed565b843b611e2e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105ed565b600080866001600160a01b03168587604051611e4a91906128ff565b60006040518083038185875af1925050503d8060008114611e87576040519150601f19603f3d011682016040523d82523d6000602084013e611e8c565b606091505b5091509150611e9c828286611ea7565b979650505050505050565b60608315611eb6575081611c77565b825115611ec65782518084602001fd5b8160405162461bcd60e51b81526004016105ed9190612133565b828054611eec90612530565b90600052602060002090601f016020900481019282611f0e5760008555611f54565b82601f10611f2757805160ff1916838001178555611f54565b82800160010185558215611f54579182015b82811115611f54578251825591602001919060010190611f39565b50610a7e9291505b80821115610a7e5760008155600101611f5c565b80356001600160a01b0381168114611f8757600080fd5b919050565b60008060408385031215611f9f57600080fd5b611fa883611f70565b946020939093013593505050565b6001600160e01b0319811681146113da57600080fd5b600060208284031215611fde57600080fd5b8135611c7781611fb6565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff8111828210171561202557612025611fe9565b6040525050565b600067ffffffffffffffff83111561204657612046611fe9565b60405161205d601f8501601f191660200182611fff565b80915083815284848401111561207257600080fd5b83836020830137600060208583010152509392505050565b60006020828403121561209c57600080fd5b813567ffffffffffffffff8111156120b357600080fd5b8201601f810184136120c457600080fd5b6120d38482356020840161202c565b949350505050565b60005b838110156120f65781810151838201526020016120de565b838111156117215750506000910152565b6000815180845261211f8160208601602086016120db565b601f01601f19169290920160200192915050565b602081526000611c776020830184612107565b60006020828403121561215857600080fd5b5035919050565b60006020828403121561217157600080fd5b611c7782611f70565b600067ffffffffffffffff82111561219457612194611fe9565b5060051b60200190565b600082601f8301126121af57600080fd5b813560206121bc8261217a565b6040516121c98282611fff565b83815260059390931b85018201928281019150868411156121e957600080fd5b8286015b8481101561220457803583529183019183016121ed565b509695505050505050565b600082601f83011261222057600080fd5b611c778383356020850161202c565b600080600080600060a0868803121561224757600080fd5b61225086611f70565b945061225e60208701611f70565b9350604086013567ffffffffffffffff8082111561227b57600080fd5b61228789838a0161219e565b9450606088013591508082111561229d57600080fd5b6122a989838a0161219e565b935060808801359150808211156122bf57600080fd5b506122cc8882890161220f565b9150509295509295909350565b600080604083850312156122ec57600080fd5b823567ffffffffffffffff8082111561230457600080fd5b818501915085601f83011261231857600080fd5b813560206123258261217a565b6040516123328282611fff565b83815260059390931b850182019282810191508984111561235257600080fd5b948201945b838610156123775761236886611f70565b82529482019490820190612357565b9650508601359250508082111561238d57600080fd5b5061239a8582860161219e565b9150509250929050565b600081518084526020808501945080840160005b838110156123d4578151875295820195908201906001016123b8565b509495945050505050565b602081526000611c7760208301846123a4565b60008060006060848603121561240757600080fd5b505081359360208301359350604090920135919050565b80151581146113da57600080fd5b6000806040838503121561243f57600080fd5b61244883611f70565b915060208301356124588161241e565b809150509250929050565b6000806040838503121561247657600080fd5b61247f83611f70565b915061248d60208401611f70565b90509250929050565b600080600080600060a086880312156124ae57600080fd5b6124b786611f70565b94506124c560208701611f70565b93506040860135925060608601359150608086013567ffffffffffffffff8111156124ef57600080fd5b6122cc8882890161220f565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600181811c9082168061254457607f821691505b6020821081141561256557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156125945761259461256b565b500190565b60208082526027908201527f4d696e7420776f756c6420657863656564206d617820737570706c79206f66206040820152665469636b65747360c81b606082015260800190565b6000828210156125f2576125f261256b565b500390565b60008160001904831182151516156126115761261161256b565b500290565b60008261263357634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561264a57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600060001982141561267b5761267b61256b565b5060010190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60408152600061272460408301856123a4565b828103602084015261273681856123a4565b95945050505050565b6001600160a01b0386811682528516602082015260a06040820181905260009061276b908301866123a4565b828103606084015261277d81866123a4565b905082810360808401526127918185612107565b98975050505050505050565b6000602082840312156127af57600080fd5b8151611c7781611fb6565b600060033d11156127d35760046000803e5060005160e01c5b90565b600060443d10156127e45790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561281457505050505090565b828501915081518181111561282c5750505050505090565b843d87010160208285010111156128465750505050505090565b61285560208286010187611fff565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6000602082840312156128ba57600080fd5b8151611c778161241e565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090611e9c90830184612107565b600082516129118184602087016120db565b919091019291505056fea26469706673582212202cf71d573a06bb905459f36c6db810bf356c76768af5d3b7f556c0003f7454c664736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102525760003560e01c80636b49e5f911610146578063a22cb465116100c3578063cd34f0ee11610087578063cd34f0ee14610508578063d5abeb0114610511578063e985e9c51461051a578063f242432a14610556578063f2fde38b14610569578063f9b418911461057c57600080fd5b8063a22cb465146104a5578063a5c42ef1146104b8578063ab8caf3b146104c0578063bd85b039146104c8578063c4d2696d146104e857600080fd5b80638bf22a0e1161010a5780638bf22a0e146104685780638da5cb5b1461047157806393e0682b1461048257806395d89b41146104955780639c84e6f21461049d57600080fd5b80636b49e5f914610437578063715018a614610440578063766e33f4146104485780638033fe49146104515780638620410b1461045a57600080fd5b80632eb2c2d6116101d45780634c02f62e116101985780634c02f62e146103d25780634e1273f4146103da5780634f558e79146103fa57806356ce0f671461041c57806366a5ef2f1461042457600080fd5b80632eb2c2d6146103675780633fc8cef31461037a57806344098c9f146103a157806348a0d754146103c15780634b09b72a146103c957600080fd5b80630e89341c1161021b5780630e89341c146102dd5780631966ebb8146102f05780632240dbdb146102f95780632a11ced0146103295780632c4e422d1461035457600080fd5b8062fdd58e1461025757806301ffc9a71461027d57806302fe5305146102a057806306fdde03146102b55780630e75822c146102ca575b600080fd5b61026a610265366004611f8c565b610585565b6040519081526020015b60405180910390f35b61029061028b366004611fcc565b61061c565b6040519015158152602001610274565b6102b36102ae36600461208a565b61066e565b005b6102bd6106dd565b6040516102749190612133565b6102b36102d8366004611f8c565b61076b565b6102bd6102eb366004612146565b6108b9565b61026a600e5481565b6000805260036020527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff5461026a565b61033c610337366004612146565b61092a565b6040516001600160a01b039091168152602001610274565b61026a61036236600461215f565b610954565b6102b361037536600461222f565b610961565b61033c7f000000000000000000000000000000000000000000000000000000000000000081565b61026a6103af36600461215f565b600f6020526000908152604090205481565b61026a6109f8565b61026a60085481565b6102b3610a82565b6103ed6103e83660046122d9565b610b6d565b60405161027491906123df565b610290610408366004612146565b600090815260036020526040902054151590565b61026a600181565b6102b3610432366004611f8c565b610c97565b61026a600c5481565b6102b3610e40565b61026a60095481565b61026a600a5481565b61026a662386f26fc1000081565b61026a60075481565b6004546001600160a01b031661033c565b6102b36104903660046123f2565b610e74565b6102bd610fea565b6102b3610ff7565b6102b36104b336600461242c565b6111e4565b61026a600081565b61026a600581565b61026a6104d6366004612146565b60009081526003602052604090205490565b61026a6104f636600461215f565b60106020526000908152604090205481565b61026a600d5481565b61026a61271081565b610290610528366004612463565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6102b3610564366004612496565b6112bb565b6102b361057736600461215f565b611342565b61026a600b5481565b60006001600160a01b0383166105f65760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b148061064d57506001600160e01b031982166303a24d0760e21b145b8061066857506301ffc9a760e01b6001600160e01b03198316145b92915050565b6004546001600160a01b031633146106985760405162461bcd60e51b81526004016105ed906124fb565b6106a1816113dd565b60007f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b826040516106d29190612133565b60405180910390a250565b600580546106ea90612530565b80601f016020809104026020016040519081016040528092919081815260200182805461071690612530565b80156107635780601f1061073857610100808354040283529160200191610763565b820191906000526020600020905b81548152906001019060200180831161074657829003601f168201915b505050505081565b6004546001600160a01b031633146107955760405162461bcd60e51b81526004016105ed906124fb565b61271081600e546107a69190612581565b11156107c45760405162461bcd60e51b81526004016105ed90612599565b600754816008546107d59190612581565b11156108375760405162461bcd60e51b815260206004820152602b60248201527f4d696e7420776f756c64206578656564206d617820616c6c6f7765642072657360448201526a195c9d9948185b5bdd5b9d60aa1b60648201526084016105ed565b80600e60008282546108499190612581565b9250508190555080600860008282546108629190612581565b90915550610872905082826113f4565b816001600160a01b03167fdc1be2b3178a4f8f792d301d58c67ced5cf041ef7c9601aaedbd3ccf3957ddc3826040516108ad91815260200190565b60405180910390a25050565b606081156109215760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016105ed565b61066882611410565b6011818154811061093a57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000610668826000610585565b6001600160a01b03851633148061097d575061097d8533610528565b6109e45760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b60648201526084016105ed565b6109f185858585856114a4565b5050505050565b600080600d54600c54610a0b91906125e0565b9050600954421015610a1f57600091505090565b600a54421115610a2e57919050565b6000600b5460095442610a4191906125e0565b600c54610a4e91906125f7565b610a589190612616565b9050600d548111610a6a576000610a77565b600d54610a7790826125e0565b9250505090565b5090565b6004546001600160a01b03163314610aac5760405162461bcd60e51b81526004016105ed906124fb565b6040516370a0823160e01b8152306004820152610b6b9033906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610b16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3a9190612638565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190611681565b565b60608151835114610bd25760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016105ed565b6000835167ffffffffffffffff811115610bee57610bee611fe9565b604051908082528060200260200182016040528015610c17578160200160208202803683370190505b50905060005b8451811015610c8f57610c62858281518110610c3b57610c3b612651565b6020026020010151858381518110610c5557610c55612651565b6020026020010151610585565b828281518110610c7457610c74612651565b6020908102919091010152610c8881612667565b9050610c1d565b509392505050565b333214610cd55760405162461bcd60e51b815260206004820152600c60248201526b4d7573742075736520454f4160a01b60448201526064016105ed565b6001600160a01b0382166000908152600f6020526040902054600590610cfc908390612581565b1115610d4a5760405162461bcd60e51b815260206004820152601e60248201527f4d6178206d696e7473207065722061646472657373206578636565646564000060448201526064016105ed565b600e5481610d7f6000805260036020527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff5490565b610d899190612581565b1115610da75760405162461bcd60e51b81526004016105ed90612599565b6000610dba662386f26fc10000836125f7565b9050610df16001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330846116e9565b610dfb8383611727565b60405182815233906001600160a01b038516907f183b7d2009bd295f45618f67543e0ff22bd119ab0449f00482d31b796b1707869060200160405180910390a3505050565b6004546001600160a01b03163314610e6a5760405162461bcd60e51b81526004016105ed906124fb565b610b6b6000611778565b6004546001600160a01b03163314610e9e5760405162461bcd60e51b81526004016105ed906124fb565b600a5442118015610eb45750610eb26109f8565b155b610f0a5760405162461bcd60e51b815260206004820152602160248201527f50726576696f75732072656c65617365206973207374696c6c2072756e6e696e6044820152606760f81b60648201526084016105ed565b61271081600e54610f1b9190612581565b1115610f695760405162461bcd60e51b815260206004820181905260248201527f496e636f72726563742072656c656173654d6178537570706c792076616c756560448201526064016105ed565b6009839055600a829055610f7d83836125e0565b600b55600c819055600e8054829190600090610f9a908490612581565b90915550506000600d5560408051848152602081018490529081018290527f161f863c66e922aa93d8c39fcabf4d758415785c253e261588ec6e5de68cb03a9060600160405180910390a1505050565b600680546106ea90612530565b3332146110355760405162461bcd60e51b815260206004820152600c60248201526b4d7573742075736520454f4160a01b60448201526064016105ed565b336000908152601060205260409020546001116110945760405162461bcd60e51b815260206004820152601f60248201527f4d617820636c61696d732070657220616464726573732065786365656465640060448201526064016105ed565b336000908152600f60205260409020546005116110f35760405162461bcd60e51b815260206004820152601e60248201527f4d6178206d696e7473207065722061646472657373206578636565646564000060448201526064016105ed565b600e546000805260036020527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff541061113e5760405162461bcd60e51b81526004016105ed90612599565b60006111486109f8565b1161118c5760405162461bcd60e51b81526020600482015260146024820152734e6f207469636b65747320617661696c61626c6560601b60448201526064016105ed565b3360009081526010602052604081208054916111a783612667565b91905055506111b7336001611727565b60405133907f1b95c0400d5c41a0ede89b5c1e59863547019bfb3ec7c4d321f59262fcc6c79890600090a2565b336001600160a01b038316141561124f5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016105ed565b3360008181526001602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6001600160a01b0385163314806112d757506112d78533610528565b6113355760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016105ed565b6109f185858585856117ca565b6004546001600160a01b0316331461136c5760405162461bcd60e51b81526004016105ed906124fb565b6001600160a01b0381166113d15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105ed565b6113da81611778565b50565b80516113f0906002906020840190611ee0565b5050565b6113f082600083604051806020016040528060008152506118f0565b60606002805461141f90612530565b80601f016020809104026020016040519081016040528092919081815260200182805461144b90612530565b80156114985780601f1061146d57610100808354040283529160200191611498565b820191906000526020600020905b81548152906001019060200180831161147b57829003601f168201915b50505050509050919050565b81518351146115065760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016105ed565b6001600160a01b03841661152c5760405162461bcd60e51b81526004016105ed90612682565b3360005b845181101561161357600085828151811061154d5761154d612651565b60200260200101519050600085838151811061156b5761156b612651565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156115bb5760405162461bcd60e51b81526004016105ed906126c7565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906115f8908490612581565b925050819055505050508061160c90612667565b9050611530565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611663929190612711565b60405180910390a46116798187878787876118fc565b505050505050565b6040516001600160a01b0383166024820152604481018290526116e490849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611a58565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526117219085906323b872dd60e01b906084016116ad565b50505050565b6001600160a01b0382166000908152600f60205260408120805483929061174f908490612581565b9250508190555080600d60008282546117689190612581565b909155506113f0905082826113f4565b600480546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0384166117f05760405162461bcd60e51b81526004016105ed90612682565b3361180981878761180088611b2a565b6109f188611b2a565b6000848152602081815260408083206001600160a01b038a1684529091529020548381101561184a5760405162461bcd60e51b81526004016105ed906126c7565b6000858152602081815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290611887908490612581565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46118e7828888888888611b75565b50505050505050565b61172184848484611c30565b6001600160a01b0384163b156116795760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611940908990899088908890889060040161273f565b6020604051808303816000875af192505050801561197b575060408051601f3d908101601f191682019092526119789181019061279d565b60015b611a28576119876127ba565b806308c379a014156119c1575061199c6127d6565b806119a757506119c3565b8060405162461bcd60e51b81526004016105ed9190612133565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016105ed565b6001600160e01b0319811663bc197c8160e01b146118e75760405162461bcd60e51b81526004016105ed90612860565b6000611aad826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c659092919063ffffffff16565b8051909150156116e45780806020019051810190611acb91906128a8565b6116e45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105ed565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611b6457611b64612651565b602090810291909101015292915050565b6001600160a01b0384163b156116795760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611bb990899089908890889088906004016128c5565b6020604051808303816000875af1925050508015611bf4575060408051601f3d908101601f19168201909252611bf19181019061279d565b60015b611c00576119876127ba565b6001600160e01b0319811663f23a6e6160e01b146118e75760405162461bcd60e51b81526004016105ed90612860565b611c3c84848484611c7e565b60008381526003602052604081208054849290611c5a908490612581565b909155505050505050565b6060611c748484600085611d7f565b90505b9392505050565b6001600160a01b038416611cde5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016105ed565b33611cef8160008761180088611b2a565b6000848152602081815260408083206001600160a01b038916845290915281208054859290611d1f908490612581565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46109f181600087878787611b75565b606082471015611de05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105ed565b843b611e2e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105ed565b600080866001600160a01b03168587604051611e4a91906128ff565b60006040518083038185875af1925050503d8060008114611e87576040519150601f19603f3d011682016040523d82523d6000602084013e611e8c565b606091505b5091509150611e9c828286611ea7565b979650505050505050565b60608315611eb6575081611c77565b825115611ec65782518084602001fd5b8160405162461bcd60e51b81526004016105ed9190612133565b828054611eec90612530565b90600052602060002090601f016020900481019282611f0e5760008555611f54565b82601f10611f2757805160ff1916838001178555611f54565b82800160010185558215611f54579182015b82811115611f54578251825591602001919060010190611f39565b50610a7e9291505b80821115610a7e5760008155600101611f5c565b80356001600160a01b0381168114611f8757600080fd5b919050565b60008060408385031215611f9f57600080fd5b611fa883611f70565b946020939093013593505050565b6001600160e01b0319811681146113da57600080fd5b600060208284031215611fde57600080fd5b8135611c7781611fb6565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff8111828210171561202557612025611fe9565b6040525050565b600067ffffffffffffffff83111561204657612046611fe9565b60405161205d601f8501601f191660200182611fff565b80915083815284848401111561207257600080fd5b83836020830137600060208583010152509392505050565b60006020828403121561209c57600080fd5b813567ffffffffffffffff8111156120b357600080fd5b8201601f810184136120c457600080fd5b6120d38482356020840161202c565b949350505050565b60005b838110156120f65781810151838201526020016120de565b838111156117215750506000910152565b6000815180845261211f8160208601602086016120db565b601f01601f19169290920160200192915050565b602081526000611c776020830184612107565b60006020828403121561215857600080fd5b5035919050565b60006020828403121561217157600080fd5b611c7782611f70565b600067ffffffffffffffff82111561219457612194611fe9565b5060051b60200190565b600082601f8301126121af57600080fd5b813560206121bc8261217a565b6040516121c98282611fff565b83815260059390931b85018201928281019150868411156121e957600080fd5b8286015b8481101561220457803583529183019183016121ed565b509695505050505050565b600082601f83011261222057600080fd5b611c778383356020850161202c565b600080600080600060a0868803121561224757600080fd5b61225086611f70565b945061225e60208701611f70565b9350604086013567ffffffffffffffff8082111561227b57600080fd5b61228789838a0161219e565b9450606088013591508082111561229d57600080fd5b6122a989838a0161219e565b935060808801359150808211156122bf57600080fd5b506122cc8882890161220f565b9150509295509295909350565b600080604083850312156122ec57600080fd5b823567ffffffffffffffff8082111561230457600080fd5b818501915085601f83011261231857600080fd5b813560206123258261217a565b6040516123328282611fff565b83815260059390931b850182019282810191508984111561235257600080fd5b948201945b838610156123775761236886611f70565b82529482019490820190612357565b9650508601359250508082111561238d57600080fd5b5061239a8582860161219e565b9150509250929050565b600081518084526020808501945080840160005b838110156123d4578151875295820195908201906001016123b8565b509495945050505050565b602081526000611c7760208301846123a4565b60008060006060848603121561240757600080fd5b505081359360208301359350604090920135919050565b80151581146113da57600080fd5b6000806040838503121561243f57600080fd5b61244883611f70565b915060208301356124588161241e565b809150509250929050565b6000806040838503121561247657600080fd5b61247f83611f70565b915061248d60208401611f70565b90509250929050565b600080600080600060a086880312156124ae57600080fd5b6124b786611f70565b94506124c560208701611f70565b93506040860135925060608601359150608086013567ffffffffffffffff8111156124ef57600080fd5b6122cc8882890161220f565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600181811c9082168061254457607f821691505b6020821081141561256557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156125945761259461256b565b500190565b60208082526027908201527f4d696e7420776f756c6420657863656564206d617820737570706c79206f66206040820152665469636b65747360c81b606082015260800190565b6000828210156125f2576125f261256b565b500390565b60008160001904831182151516156126115761261161256b565b500290565b60008261263357634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561264a57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600060001982141561267b5761267b61256b565b5060010190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60408152600061272460408301856123a4565b828103602084015261273681856123a4565b95945050505050565b6001600160a01b0386811682528516602082015260a06040820181905260009061276b908301866123a4565b828103606084015261277d81866123a4565b905082810360808401526127918185612107565b98975050505050505050565b6000602082840312156127af57600080fd5b8151611c7781611fb6565b600060033d11156127d35760046000803e5060005160e01c5b90565b600060443d10156127e45790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561281457505050505090565b828501915081518181111561282c5750505050505090565b843d87010160208285010111156128465750505050505090565b61285560208286010187611fff565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6000602082840312156128ba57600080fd5b8151611c778161241e565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090611e9c90830184612107565b600082516129118184602087016120db565b919091019291505056fea26469706673582212202cf71d573a06bb905459f36c6db810bf356c76768af5d3b7f556c0003f7454c664736f6c634300080a0033",
  "devdoc": {
    "details": "Extends ERC721 Non-Fungible Token Standard basic implementation",
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "exists(uint256)": {
        "details": "Indicates weither any token exist with a given id, or not."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalSupply(uint256)": {
        "details": "Total amount of tokens in with a given id."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Apollo2022 Boarding Passes Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "buyTicket(address,uint256)": {
        "notice": "Buy ticket"
      },
      "claimTicket()": {
        "notice": "Claim free ticket"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 169,
        "contract": "contracts/Apollo2022.sol:Apollo2022",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 175,
        "contract": "contracts/Apollo2022.sol:Apollo2022",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 177,
        "contract": "contracts/Apollo2022.sol:Apollo2022",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 1397,
        "contract": "contracts/Apollo2022.sol:Apollo2022",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/Apollo2022.sol:Apollo2022",
        "label": "_owner",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 4669,
        "contract": "contracts/Apollo2022.sol:Apollo2022",
        "label": "name",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 4671,
        "contract": "contracts/Apollo2022.sol:Apollo2022",
        "label": "symbol",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 4902,
        "contract": "contracts/Apollo2022.sol:Apollo2022",
        "label": "reserveMaxAmount",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 4904,
        "contract": "contracts/Apollo2022.sol:Apollo2022",
        "label": "reserveAmount",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 4906,
        "contract": "contracts/Apollo2022.sol:Apollo2022",
        "label": "releaseStart",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 4908,
        "contract": "contracts/Apollo2022.sol:Apollo2022",
        "label": "releaseEnd",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 4910,
        "contract": "contracts/Apollo2022.sol:Apollo2022",
        "label": "releaseDuration",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 4912,
        "contract": "contracts/Apollo2022.sol:Apollo2022",
        "label": "releaseMaxSupply",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 4914,
        "contract": "contracts/Apollo2022.sol:Apollo2022",
        "label": "releaseMinted",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 4916,
        "contract": "contracts/Apollo2022.sol:Apollo2022",
        "label": "curMaxSupply",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 4923,
        "contract": "contracts/Apollo2022.sol:Apollo2022",
        "label": "mintsPerAddr",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4927,
        "contract": "contracts/Apollo2022.sol:Apollo2022",
        "label": "claimsPerAddr",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4930,
        "contract": "contracts/Apollo2022.sol:Apollo2022",
        "label": "holders",
        "offset": 0,
        "slot": "17",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}